@use "./tokens.scss" as *;
@use "./breakpoints.scss" as *;

// ..:: CSS Reset ::.. // todo consider changing this to Josh Cameau's CSS minimal reset
*,
*:before,
*:after {
    overscroll-behavior: none;
    margin: 0;
    padding: 0;
    scroll-behavior: smooth;
    font-family: $font-family;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

/* makes sizing simpler */

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* remove default spacing */
/* force styling of type through styling, rather than elements */

* {
  margin: 0;
  padding: 0;
}

/* dark mode user-agent-styles */

html {
  color-scheme: dark light;
}

/* min body height */

body {
  min-height: 100vh;
}

/* responsive images/videos */
img,
picture,
svg,
video {
  display: block;
  max-width: 100%;
}





header li {
    list-style-type: none;
}

body {
    background-color: $bg-white; // todo chek background color in Figma
    height: 100%;
    overflow-x: hidden;
}

main {
    height: inherit;
}

h1, .project-title, .footer__title {
    font-size: $d-fs-2xl;
    font-weight: $fw-semiBold;
    line-height: $lh-m;
    letter-spacing: $ls-xs;
    color: $dark-80;

    @include media("<=phone") {
        font-size: $m-fs-2xl;
        line-height: $lh-s;
        letter-spacing: $ls-s;
    }
}

h2 {
    font-size: $d-fs-xl; // todo check how am I going to use h1 and h2 styles. It's confusing.
    font-weight: $fw-semiBold;
    line-height: $lh-m;
    letter-spacing: $ls-xs;
    color: $dark-80;

    @include media("<=phone") {
        font-size: $m-fs-xl;
        letter-spacing: $ls-s;
    }
}

h3 {
    font-size: $d-fs-l;
    font-weight: $fw-medium;
    letter-spacing: $ls-xs;
    line-height: $lh-s;
    color: $dark-80;

    &.bold {
        font-weight: $fw-bold;
        letter-spacing: $ls-s;
    }

    @include media("<=phone") {
        font-size: $m-fs-l;
        letter-spacing: $ls-s;
        line-height: $lh-m;

        &.bold {
            font-weight: $fw-bold;
            letter-spacing: $ls-m;
        }
    }
}

h4 {
    font-size: $d-fs-xs;
    font-weight: $fw-heavy;
    line-height: 140%;
    color: $dark-40;
    text-transform: uppercase;

    @include media("<=phone") {
        font-size: $m-fs-s;
    }
}

p, .bd-text-regular {
    font-size: $d-fs-l;
    font-weight: $fw-regular;
    line-height: $lh-2xl;
    letter-spacing: $ls-s;
    color: $dark-80;

    &.bold {
        font-weight: $fw-bold;
        color: $dark-100;
    }

    @include media("<=phone") {
        font-size: $m-fs-l;
        font-weight: $fw-regular;
        letter-spacing: $ls-m;
    }
}

a {
    text-decoration: none;
}

.bd-text-small {
    font-size: $d-fs-m;
    font-weight: $fw-regular;
    line-height: $lh-2xl;
    letter-spacing: $ls-s;
    color: $dark-80;

    @include media("<=phone") {
        font-size: $m-fs-m;
        line-height: $lh-l;
        letter-spacing: $ls-m;
    }
}

.link-text {
    font-size: $d-fs-xs;
    font-weight: $fw-semiBold;
    letter-spacing: $ls-s;
    line-height: $lh-xs;
    color: $dark-100;
    text-decoration: none;

    height: 40px;
    display: flex;
    align-items: center;
}

.tag-text {
    font-size: $d-fs-xs;
    font-weight: $fw-medium;
    line-height: $lh-xl;
    letter-spacing: $ls-s;
    color: $dark-40;
}

.caption-text {
    font-size: $d-fs-s;
    line-height: $lh-2xl;
    letter-spacing: $ls-s;
    color: $dark-80;
}

.quote-caption-text {
    font-size: $d-fs-s;
    font-weight: $fw-semiBold;
    line-height: $lh-2xl;
    letter-spacing: $ls-s;
    color: $dark-40;
}

.container-lg {
    max-width: 1440px;
    margin: 0 auto;
    width: 100%;
}

.container-sm {
    max-width: 800px;
    margin: 0 auto;
    width: 100%;

}

.center-hrz {
    // display: flex;
    // flex-flow: column;
    // align-items: center;

    @include media(">phone") {
        padding-inline: 5rem !important;
    }

    @include media("<=phone") {
        padding-inline: 1.5rem;
    }
}

.dark-80 {
    color: $dark-80;
}

.dark-60 {
    color: $dark-60;
}

.dark {
    color: $dark-80;
}

.grey {
    color: $dark-40;
}

.bold {
    font-weight: $fw-bold;
}

.italic {
    font-style: italic;
}

@mixin button-animation {
    &.light {
        color: $light-90;
        .button__text {
        }
    }

    .button__text {
        position: relative;

        &::after {
            content: "";
            width: 0%;
            height: 2px;
            background-color: none;
            transition: all .3s cubic-bezier(.25, .46, .45, .94);
            position: absolute;
            bottom: -12px;
            left: 0;
        }
    }

    svg {
        overflow: visible;
        .button__arrow-tail {
            transform: scaleX(1);
            transition:all 300ms cubic-bezier(.22,.61,.36,1);
        }

        .button__arrow-head {
            transition:all 300ms cubic-bezier(.22,.61,.36,1);
            transform: translateX(0);
        }
    }

    &:hover {
        cursor: pointer;
        .button__text {
            &::after {
                width: 100%;
                background-color: inherit;
            }
        }

        svg {
            .button__arrow-tail {
                transform: scaleX(1.25);
            }
            .button__arrow-head {
                transform: translateX(6px);
            }
        }
    }
}

.button {
    display: flex;
    align-items: center;
    gap: $space-3xs;
    height: 40px;
    color: $dark-80;
    background: none;
    border: none;
    transform: translateX(0);

    @include button-animation;
}

/** ..:: Animation ::.. **/
.wave-anm {
    animation-name: wave-animation;
    animation-duration: 1.3s;
    animation-iteration-count: 1;
    transform-origin: 70% 80%;
    animation-timing-function: ease-in-out;
    display: inline-block;
  }

  @keyframes wave-animation {
      0% { transform: rotate( 0.0deg) }
     10% { transform: rotate(14.0deg) }  /* The following five values can be played with to make the waving more or less extreme */
     20% { transform: rotate(-8.0deg) }
     30% { transform: rotate(14.0deg) }
     40% { transform: rotate(-4.0deg) }
     50% { transform: rotate(10.0deg) }
     60% { transform: rotate( 0.0deg) }  /* Reset for the last half to pause */
    100% { transform: rotate( 0.0deg) }
  }
